  1)Top K Frequent Words
  
  
  class Pair
{
    String word;
    int count;
    Pair(String word,int count)
    {
    this.word=word;
    this.count=count;
    }
}
class Solution {
    public List<String> topKFrequent(String[] words, int k) {

    PriorityQueue<Pair> pq=new PriorityQueue<Pair>(new Comparator<Pair>()
    {
    public int compare(Pair p1,Pair p2)
    {
        if(p1.count==p2.count)
        return  -p1.word.compareTo(p2.word);
        if(p1.count>p2.count)
        return +1;
        return -1;
    }


    });

    HashMap<String ,Integer> h=new HashMap<String,Integer>();
    for(int i=0;i<words.length;i++)
    {

     if(!h.containsKey(words[i]))
     {
         h.put(words[i],0);
     }
h.put(words[i],h.get(words[i])+1);


    }

    for(String s:h.keySet())
    {

    int rep=h.get(s);
    
    pq.add(new Pair(s,rep));
    if(pq.size()>k)
    pq.poll();


    }
List<String> res=new ArrayList<>();
while(!pq.isEmpty())
{
    res.add(pq.poll().word);
}
Collections.reverse(res);

return res;


    }
}




2)Distant Barcodes
class Solution {
    public int[] rearrangeBarcodes(int[] barcodes) {
        
       int freq[]=new int[100001];
       Arrays.fill(freq,0);
       for(int i:barcodes)
       {
           freq[i]++;
       }
       PriorityQueue<Integer> pq=new PriorityQueue<Integer>((a,b)->(freq[b]-freq[a]));
       for(int i=0;i<100001;i++)
       {
           if(freq[i]!=0)
           pq.add(i);
       }
int res[]=new int[barcodes.length];
int i=0;
while(!pq.isEmpty())
{
  int num=pq.poll();
  int count=freq[num];
  while(count--!=0)
  {
      res[i]=num;
      i=i+2;
      if(i>=barcodes.length)
      {
          i=1;
      }
  }

}
return res;

    }
}
