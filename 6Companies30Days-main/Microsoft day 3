Most profitable path in tree

class Solution {

    int dist[]=null;
 int parent[]=null;
  HashMap<Integer,ArrayList<Integer>> h=new HashMap<Integer,ArrayList<Integer>>();
  int maxans=Integer.MIN_VALUE;
  int ans=0;
HashSet<Integer> visited=new HashSet<Integer>();
    public int mostProfitablePath(int[][] edges, int bob, int[] amount) {

// creating adjacency lists
 


  
   for(int i=0;i<edges.length;i++)
   {
      int a=edges[i][0];
      int b=edges[i][1];
      if(!h.containsKey(a))
      {
          h.put(a,new ArrayList<Integer>());

      }
      if(!h.containsKey(b))
      {
          h.put(b,new ArrayList<Integer>());
      }

    h.get(a).add(b);
    h.get(b).add(a);

   }


  int n=edges.length;
  dist=new int[n+1];
  parent=new int[n+1];
  Arrays.fill(dist,-1);
  Arrays.fill(parent ,-1);





// we should find the distances
    dfstofindParent(0,0,0);

   int curr=bob;
   int currdist=0;
while(curr!=0)
{
   if(dist[curr]>currdist)
   {
       amount[curr]=0;
   }
 else if(dist[curr]==currdist)
 {
     amount[curr]=amount[curr]/2;
 }
 currdist++;
 curr=parent[curr];
}

 //
 dfs(0,amount);
 return maxans;


}

public void dfs(int curr,int[] amount)
{
  visited.add(curr);
   ans=ans+amount[curr];
   int trap=0;
   for(Integer i:h.get(curr))
   {
      if(visited.contains(i))
      {
          continue;
      }
     
      trap++;
      dfs(i,amount);

      

   }
   if(trap==0)
   {
      maxans =Math.max(ans,maxans);
   }


ans=ans-amount[curr];


}


    public void dfstofindParent(int curr,int pa,int dis)
    {
   dist[curr]=dis;
   parent[curr]=pa;

for(Integer adj:h.get(curr))
{

if(adj==pa)
continue;
else
{
    dfstofindParent(adj,curr,dis+1);
}

}
 
    
    }
}



