Tweet Counts Per Frequency

class TweetCounts {
  HashMap<String,List<Integer>> h;
    public TweetCounts() {
        h=new HashMap<>();
    }
    
    public void recordTweet(String tweetName, int time) {
        
   if(!h.containsKey(tweetName))
    {
        h.put(tweetName,new ArrayList<Integer>());
    }
    h.get(tweetName).add(time);



    }
    
    public List<Integer> getTweetCountsPerFrequency(String freq, String tweetName, int startTime, int endTime) {

    int fr=getValue(freq);
    int n=((endTime-startTime)/fr)+1;
    int paritition[]=new int[n];
    List<Integer> l=h.get(tweetName);
    for(int i:l)
    {
        if(i>=startTime && i<=endTime)
        {
            paritition[(i-startTime)/fr]++;
        }
    }
    List<Integer> res=new ArrayList<>();
    for(int i:paritition)
    {
        res.add(i);
    }

        return res;
    }
    public int getValue(String freq)
    {

        if(freq.equals("minute"))
        return 60;
        if(freq.equals("hour"))
        return 3600;
        else
        return 60*60*24;
    }
}

2)Number of Ways to Reach a Position After Exactly k Steps


class Solution {
    int mod=1000000007;
    public int numberOfWays(int startPos, int endPos, int k) {
        
       int dp[][]=new int[3002][1001];
       for(int[]x:dp)
       {
           Arrays.fill(x,-1);
       }
       return topdown(startPos,endPos,startPos,k,dp);



    }
    public int topdown(int startPos,int endPos,int curr,int k,int [][]dp)
    {
        if(k==0)
        {
            if(curr==endPos)
            return 1;
            return 0;
        }
        if(dp[curr+1001][k]!=-1)
    {
        return dp[curr+1001][k];
    }
     
     int leftmove=topdown(startPos,endPos,curr-1,k-1,dp)%mod;
     int rightmove=topdown(startPos,endPos,curr+1,k-1,dp)%mod;
     return dp[curr+1001][k]=(leftmove+rightmove)%mod;


    }
}


3)Maximum Length of Repeated Subarray

class Solution {
    public int findLength(int[] nums1, int[] nums2) {
        
int m=nums1.length;
int n=nums2.length;
int dp[][]=new int[m+1][n+1];
int max=Integer.MIN_VALUE;
for(int i=1;i<=m;i++)
{
    for(int j=1;j<=n;j++)
    {
        if(nums1[i-1]==nums2[j-1])
        {
            dp[i][j]=dp[i-1][j-1]+1;
            max=Math.max(dp[i][j],max);
        }
    }
}


if(max==Integer.MIN_VALUE)
return 0;
return max;


    }
}


4)Last Moment Before All Ants Fall Out of a Plank


class Solution {
    public int getLastMoment(int n, int[] left, int[] right) {
        
     int maxleft=Integer.MIN_VALUE;
     int minright=Integer.MAX_VALUE;
     for(int i:left)
     {
         maxleft=Math.max(maxleft,i);
     }
     for(int i:right)
     {
         minright=Math.min(minright,i);
     }

return Math.max(maxleft,n-minright);


    }
}



5)Generate Random Point in a Circle

class Solution {

  double rad;
  double x;
  double y;


    public Solution(double radius, double x_center, double y_center) {
         rad=radius;
         x=x_center;
         y=y_center;


    }
    
    public double[] randPoint() {
         double minx=x-rad;
         double maxx=x+rad;
         double miny=y-rad;
         double maxy=y+rad;

      double res[]=new double[2];
      res[0]=(Math.random()*(maxx-minx))+minx;
      res[1]=(Math.random()*(maxy-miny))+miny;

while((((res[0]-x)*(res[0]-x))+((res[1]-y)*(res[1]-y)))>=rad*rad)
{
    res[0]=(Math.random()*(maxx-minx))+minx;
      res[1]=(Math.random()*(maxy-miny))+miny;
}
return res;

    }
}

