 Distinct Echo Substrings
 
 class Solution {
    public int distinctEchoSubstrings(String text) {
        int n=text.length();
      HashSet<String> h=new HashSet<String>();

      for(int len=1;len<=n/2;len++)
      {

        int count=0;
        
        for(int l=0,r=len;r<n;l++,r++)
        {
              if(text.charAt(l)==text.charAt(r))
              {
                 
                  count++;
              }
              else
              {
               
                  count=0;
              }
              if(count==len)
              {
                  
                  if(!h.contains(text.substring(l+1,r+1)))
                  h.add(text.substring(l+1,r+1));
                  count--;

              }
      
        }

      }


return h.size();


    }
}



2)
 Fruit Into Baskets


class Solution {
    public int totalFruit(int[] fruits) {
        int n=fruits.length;
       int max=0;
     HashSet<Integer> h=new HashSet<Integer>();
     for(int i:fruits)
     {
         h.add(i);
     }
     if(h.size()<=2)
     return fruits.length;



int j=0;
int i=0;
int freq[]=new int[100001];
Arrays.fill(freq,0);
int total=0;
       for( i=0;i<n;i++)
       {
             if(freq[fruits[i]]==0 && total==2)
             {
                 max=Math.max(max,i-j);
                  freq[fruits[i]]++;
               while(j<i)
               {
                   if(freq[fruits[j]]>1)
                   {
                       freq[fruits[j]]--;
                       j++;
                   }
                   else if(freq[fruits[j]]==1)
                   {
                       freq[fruits[j]]--;
                       j++;
                       break;
                     
                   }



               }
              



             }
             else if(freq[fruits[i]]==0)
             {
                 total++;
                 freq[fruits[i]]++;
             }
             else 
             {
                 freq[fruits[i]]++;
             }
      

       }
       max=Math.max(max,i-j);




return max;




    }
}


3)
K Divisible Elements Subarrays

class Solution {
    public int countDistinct(int[] nums, int k, int p) {
 int n=nums.length;
 int a=0;
           HashSet<String> ans=new HashSet<String>();
           for(int i=0;i<n;i++)
           {
               StringBuilder sb=new StringBuilder();
               int count=0;
               for(int j=i;j<n;j++)
               {
                   sb.append(nums[j]+" ");
                   if(nums[j]%p==0)
                   {
                   count++;
                   }
                   if(count<=k)
                   {
                       if(!ans.contains(sb.toString()))
                       {
                           ans.add(sb.toString());
                           a++;

                       }

                   }
                   else
                   {
                       break;
                   }
               }
           }



return ans.size();


    }
}








