1)Random Pick with Weight

class Solution {

    int w_cum[];
    int sum=0;



    public Solution(int[] w) {



       w_cum=new int[w.length];
       int j=0;
       for(int i:w)
       {
           sum=sum+i;
           w_cum[j++]=sum;
       }

    }
   
    public int pickIndex() {
       
   int indx=(int)(Math.random()*sum);

   return binarySearch(indx+1);

    }
   public int binarySearch(int val)
   {
       int l=0;
       int r=w_cum.length-1;
       while(l<r)
       {
           int mid=(l+r)/2;
           if(w_cum[mid]<val)
           {
               l=mid+1;
           }
           else
           {
               r=mid;
           }
       }
       return r;
   }

}

2)Maximum Numbers of Coins you can get

class Solution {
    public int maxCoins(int[] piles) {
          Arrays.sort(piles);
          int n=piles.length;
          int ans=0;
          for(int l=n-1,r=l-1,i=0;i<r;i++)
          {

             ans+=piles[r];
             l=r-1;
             r=l-1;


          }

return ans;

    }
}


3)

Network Delay Time


class Pair
{
    int to;
    int time;
    Pair(int to,int time)
    {
        this.to=to;
        this.time=time;
    }
}
class Solution {
    public int networkDelayTime(int[][] times, int n, int k) {
       

    // we will prepare an adjacency list;
    ArrayList<ArrayList<Pair>> adj=new ArrayList<ArrayList<Pair>>();
    for(int i=0;i<n;i++)
    {
        adj.add(new ArrayList<Pair>());
    }
    for(int i=0;i<times.length;i++)
    {
       adj.get(times[i][0]-1).add(new Pair(times[i][1]-1,times[i][2]));

    }

      boolean fin[]=new boolean[n];
      Arrays.fill(fin,false);
      int dist[]=new int[n];

      Arrays.fill(dist,Integer.MAX_VALUE);
      dist[k-1]=0;
     
      Queue<Pair> pq=new LinkedList<Pair>();
 pq.add(new Pair(k-1,0));
while(!pq.isEmpty())
{

   
    int node=pq.peek().to;
        int weight=pq.peek().time;
        pq.poll();
   
    for(Pair p:adj.get(node))
    {
         int x=p.to;
         int time=p.time;
         if( dist[x]>weight+time)
         {
             dist[x]=weight+time;
             pq.add(new Pair(x,dist[x]));
         }
       
    }


}
int max=0;
  for(int i=0;i<n;i++)
  {
      if(dist[i]==Integer.MAX_VALUE)
      return -1;
      max=Math.max(max,dist[i]);
  }
       
return max;

    }
}

4)Matrix Block Sum


class Solution {
    public int[][] matrixBlockSum(int[][] mat, int k) {

      int m=mat.length;
      int n=mat[1].length;

       int res[][]=new int[m][n];
       for(int i=0;i<m;i++)
       {
           for(int j=0;j<n;j++)
           {
                int rlow=i-k;
                int rhigh=i+k;
                int clow=j-k;
                int chigh=j+k;
                for(int r=rlow;r<=rhigh;r++)
                {
                    if(r>=0&& r<m)
                    {
                          for(int c=clow;c<=chigh;c++)
                          {
                              if(c>=0&& c<n)
                              {
                                  res[i][j]+=mat[r][c];
                              }
                          }
                    }
                }
               



           }
       }
       return res;
    }
}

5)Restore IP Addresses
class Solution {
List out;
public List restoreIpAddresses(String s) {
out = new ArrayList<>();

    backtracking(s, 0, s.length(), "", 0);
   
    return out;
}

public void backtracking(String s, int current, int n, String str, int dotCount) {
    if (current >= n && dotCount == 4) {
        out.add(str.substring(0, str.length()-1));
        return;
    }
   
    if (current >= n) {
        return;
    }
   
    if (dotCount < 4) {
        for (int i=current; i<current+3 && i<n; i++) {
            String sub = s.substring(current, i+1);
           
            if (sub.length() > 1 && sub.charAt(0) == '0') {
                continue;
            }
           
            if (Integer.parseInt(sub) > 255) {
                continue;
            }
           
            sub += ".";
           
            backtracking(s, i+1, n, str + sub, dotCount+1);
        }
    }
   
   
}
}

6)Swim in rising Water

class Solution {
    class Cluster implements Comparable<Cluster> {
        int row;
        int col;
        int max;
        Cluster(int r, int c, int m) {
            this.row = r;
            this.col = c;
            this.max = m;
        }
        public int compareTo(Cluster other) {
            return this.max - other.max;
        }
    }

    int[][] dirs = {{0, 1}, {1, 0}, {0, -1}, {-1, 0}};

    public int swimInWater(int[][] grid) {
        Queue<Cluster> queue = new PriorityQueue();
        queue.offer(new Cluster(0, 0, grid[0][0]));
        boolean[][] visited = new boolean[51][51];
        int time = Integer.MAX_VALUE;
        while(!queue.isEmpty()) {
            Cluster cls = queue.poll();
            int row = cls.row;
            int col = cls.col;
            int maxi = cls.max;

            if(row == grid.length - 1 && col == grid[0].length - 1)
                return maxi;

            visited[row][col] = true;  

            for(int[] d : dirs) {
                int rdash = row + d[0];
                int cdash = col + d[1];
                if(!isValid(grid, rdash, cdash) || visited[rdash][cdash])
                    continue;
                int max = Math.max(maxi, grid[rdash][cdash]);    
                queue.add(new Cluster(rdash, cdash, max));    
            }
        }
        return -1;
    }

    boolean isValid(int[][] grid, int r, int c){
        return r >= 0 && c >= 0 && r < grid.length && c < grid[0].length;
    }
}



7)Strictly Palindromic Number

class Solution {
    public boolean isStrictlyPalindromic(int n) {
        return false;
    }
}


8)Max Compatibility Score


class Solution {
    public int maxCompatibilitySum(int[][] students, int[][] mentors) {
        int n = students.length;
        int m = n;
        boolean [] visited = new boolean[students.length];
        return GetMaxCS(students, mentors, n, m, 0, visited);
    }

    public int GetMaxCS(int [][] students, int [][] mentors, int n, int m,
    int ind, boolean [] visited)
    {
        if(ind == n)
        return 0;
        int maxSum = 0;
        for(int j=0;j<m;j++)
        {
            if(visited[j])
            continue;

            visited[j] = true;
            int sum = GetSum(students[ind], mentors[j]) +
                        GetMaxCS(students, mentors, n, m, ind+1, visited);
            visited[j] = false;
            maxSum = Math.max(maxSum, sum);
        }
        return maxSum;
    }

    public int GetSum(int [] student, int [] mentor)
    {
        int sum = 0;
        for(int i=0;i<student.length;i++)
        {
            if(student[i] == mentor[i])
            sum++;
        }
        return sum;
    }
}
