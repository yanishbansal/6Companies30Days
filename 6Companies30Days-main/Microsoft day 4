Most Profitable Path


class Solution {

    int dist[]=null;
 int parent[]=null;
  HashMap<Integer,ArrayList<Integer>> h=new HashMap<Integer,ArrayList<Integer>>();
  int maxans=Integer.MIN_VALUE;
  int ans=0;
HashSet<Integer> visited=new HashSet<Integer>();
    public int mostProfitablePath(int[][] edges, int bob, int[] amount) {

// creating adjacency lists
 


 
   for(int i=0;i<edges.length;i++)
   {
      int a=edges[i][0];
      int b=edges[i][1];
      if(!h.containsKey(a))
      {
          h.put(a,new ArrayList<Integer>());

      }
      if(!h.containsKey(b))
      {
          h.put(b,new ArrayList<Integer>());
      }

    h.get(a).add(b);
    h.get(b).add(a);

   }


  int n=edges.length;
  dist=new int[n+1];
  parent=new int[n+1];
  Arrays.fill(dist,-1);
  Arrays.fill(parent ,-1);





// we should find the distances
    dfstofindParent(0,0,0);

   int curr=bob;
   int currdist=0;
while(curr!=0)
{
   if(dist[curr]>currdist)
   {
       amount[curr]=0;
   }
 else if(dist[curr]==currdist)
 {
     amount[curr]=amount[curr]/2;
 }
 currdist++;
 curr=parent[curr];
}

 //
 dfs(0,amount);
 return maxans;


}

public void dfs(int curr,int[] amount)
{
  visited.add(curr);
   ans=ans+amount[curr];
   int trap=0;
   for(Integer i:h.get(curr))
   {
      if(visited.contains(i))
      {
          continue;
      }
     
      trap++;
      dfs(i,amount);

     

   }
   if(trap==0)
   {
      maxans =Math.max(ans,maxans);
   }


ans=ans-amount[curr];


}

     
   

    public void dfstofindParent(int curr,int pa,int dis)
    {
   dist[curr]=dis;
   parent[curr]=pa;

for(Integer adj:h.get(curr))
{

if(adj==pa)
continue;
else
{
    dfstofindParent(adj,curr,dis+1);
}

}

 
   
    }
}






 Number of Pairs Satisfying Inequality
 
 
 class Solution {
    long count=0;
    public long numberOfPairs(int[] nums1, int[] nums2, int diff) {
       
       
        int n=nums1.length;
        int res[]=new int[n];
        for(int i=0;i<n;i++)
        {
            res[i]=nums1[i]-nums2[i]+diff;
        }
     mergesort(res,0,n-1,diff);
    return count;
   
   
    }


    public void  mergesort(int res[],int start,int end,int diff)
    {
     if(start==end)
     {
         return ;
     }
     int mid=(start+end)/2;
     mergesort(res,start,mid,diff);
     mergesort(res,mid+1,end,diff);
   merge(res,start,mid,end,diff);

    }
    public void merge(int res[],int start,int mid,int end,int diff)
    {
        int i=start;
        int j=mid+1;
     while(i<=mid&& j<=end)
     {
          if(res[i]<=res[j]+diff)
          {
              count=count+(end-j)+1;
              i++;
          }
          else
          {
              j++;
          }

     }
     ArrayList<Integer> temp=new ArrayList<Integer>();
     for( i=start;i<=end;i++)
     {
         temp.add(res[i]);
     }
  Collections.sort(temp);
  int k=0;
  for( i=start;i<=end;i++)
  {
       res[i]=temp.get(k++);
  }


    }
}




Shortest Unsorted Continuous Subarray



class Solution {
    public int findUnsortedSubarray(int[] nums) {
int n=nums.length;
     int start=0;
     int end=n-1;

while(start+1<n&& nums[start]<=nums[start+1])
{
   start++;

}
while(end-1>0 && nums[end-1]<=nums[end])
{
    end--;

}
if(start==n-1)
{
    return 0;
}

int max=Integer.MIN_VALUE;
int min=Integer.MAX_VALUE;

for(int i=start;i<=end;i++)
{
    max=Math.max(max,nums[i]);
    min=Math.min(min,nums[i]);
}

while(start-1>=0&& nums[start-1]>min)
{
    start--;
}
  while(end+1<n&& nums[end+1]<max)
  {
      end++;
  }



return end-start+1;
    }
}

