longest happy prefix



class Solution {
    public String longestPrefix(String s) {
        int n = s.length();
        int[] lps = new int[n];
        for (int i = 1, j = 0; i < n; i++) {
            while (j > 0 && s.charAt(i) != s.charAt(j)) j = lps[j-1];
            if (s.charAt(i) == s.charAt(j)) lps[i] = ++j;
        }
        return s.substring(0, lps[n-1]);
    }
}



Seat Arrangement in a SpiceJet Problem - Online OA February â€˜22

class Solution {
    public double nthPersonGetsNthSeat(int n) {
        if(n==1)
            return 1;
        double[] strg = new double[n];
        strg[0] = 1.0;
        strg[1] = 0.5;
        for(int i=2;i<strg.length;i++){
            double d = (1/(1.0*n)) + ((n-2)/(1.0*n))*(strg[i-1]);
            strg[i] = d;
        }
        return strg[n-1];
    }
}


Minimum deletions


class Solution {
    public int minOperations(int[] nums, int[] numsDivide) {
        Arrays.sort(numsDivide);
        int val=numsDivide[0];
        for(int i=1;i<numsDivide.length;i++){
            val=gcd(val,numsDivide[i]);
        }
        Arrays.sort(nums);
        int c=0;
        if(nums[0]>val) return -1;
        for(int i=0;i<nums.length;i++){
            if(nums[i]>val) break;
            if(val%nums[i]!=0) c++;
            else break;
        }
        if(c==nums.length) return -1;
        return c;
    }

    static int gcd(int a, int b){
        if (a == 0) return b;
        return gcd(b % a, a);
    }
}





